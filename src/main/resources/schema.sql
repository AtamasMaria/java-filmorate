DROP TABLE IF EXISTS users, friends, films, genres, film_genres, likes, mpa;

CREATE TABLE IF NOT EXISTS users (
user_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
email VARCHAR(200) NOT NULL,
login VARCHAR(50) NOT NULL,
name VARCHAR(200) NOT NULL,
birthday DATE NOT NULL,
CONSTRAINT user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS friends (
user_id INTEGER NOT NULL REFERENCES users (user_id),
friend_id INTEGER NOT NULL REFERENCES users (user_id),
status BOOLEAN
);

CREATE TABLE IF NOT EXISTS mpa (
mpa_id INTEGER NOT NULL  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(10) NOT NULL,
description VARCHAR(200) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
film_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(150) NOT NULL,
description VARCHAR(200) NOT NULL,
release_date DATE NOT NULL,
duration INTEGER NOT NULL,
rate INTEGER,
mpa_id INTEGER NOT NULL,
CONSTRAINT films_fk FOREIGN KEY (mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
genre_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(50),
CONSTRAINT Genre_Name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS film_genres (
film_id INTEGER NOT NULL,
genre_id INTEGER NOT NULL,
CONSTRAINT film_genres_film_id_fk FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
CONSTRAINT film_genres_genre_id_fk FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE RESTRICT,
CONSTRAINT FG_GenreId_FilmId_uc UNIQUE (genre_id, film_id)
);

CREATE TABLE IF NOT EXISTS likes (
film_id INTEGER NOT NULL,
user_id INTEGER NOT NULL,
CONSTRAINT likes_film_id_fk FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
CONSTRAINT likes_user_id_fk FOREIGN KEY (user_id) REFERENCES users(user_id),
CONSTRAINT likes_uc UNIQUE (film_id, user_id)
);



