DROP TABLE IF EXISTS FILMS, USERS, FRIENDS, LIKES, MPA, GENRES, FILM_GENRES;

create table if not exists USERS (
    USER_ID  INTEGER auto_increment,
    NAME     CHARACTER VARYING(30) not null,
    EMAIL    CHARACTER VARYING(30) not null,
    LOGIN    CHARACTER VARYING(30) not null,
    BIRTHDAY DATE                  not null,
    constraint USERS_PK PRIMARY KEY (USER_ID)
);

create table if not exists FRIENDS (
    USER_ID   INTEGER not null,
    FRIEND_ID INTEGER not null,
    STATUS    BOOLEAN not null,
    CONSTRAINT FRIENDS_USERS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS
);

create table if not exists FILMS (
    FILM_ID     INTEGER auto_increment,
    NAME        CHARACTER VARYING(30) not null,
    DESCRIPTION CHARACTER VARYING(30) not null,
    DURATION    INTEGER               not null,
    RELEASEDATE DATE                  not null,
    MPA_ID      INTEGER,
    CONSTRAINT FILMS_PK  PRIMARY KEY (FILM_ID)
);

create table if not exists GENRES (
    GENRE_ID INTEGER               not null,
    NAME     CHARACTER VARYING(20) not null,
    CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);

create table if not exists FILM_GENRES (
    FILM_ID  INTEGER not null,
    GENRE_ID INTEGER,
    CONSTRAINT FILMS_GENRE_FILMS_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT FILMS_GENRE_GENRE_GENRE_ID_FK FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID)
);


create table if not exists LIKES (
    FILM_ID INTEGER not null,
    USER_ID INTEGER,
    CONSTRAINT LIKES_FILMS_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT LIKES_USERS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

create table if not exists MPA (
    MPA_ID INTEGER                  not null,
    NAME      CHARACTER VARYING(30) not null,
    DESCRIPTION CHARACTER VARYING(100) not null,
    CONSTRAINT MPA_PK  PRIMARY KEY (MPA_ID)
);